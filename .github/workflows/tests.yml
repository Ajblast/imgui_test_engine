#
# This file describes building and testing of Dear ImGui along with variety of examples and backends.
# Tested platforms:
# * Windows
# * Linux
# * MacOS
#
# Tested branches:
# * master
# * docking
# * features/range_select
#
# To save time and resources only linux builds/tests run on push. MacOS and Windows builds and tests
# are triggered daily (see scheduled.yml).
#
# Builds of platforms not tested by default may be requested by adding a hint to commit message.
# String may appear anywhere in commit message, caps are important.
# Supported build hints:
# * Build all
# * Build Windows
# * Build MacOS
#
name: tests

on:
  push:
  pull_request:
  workflow_run:
    # Use a workflow as a trigger of scheduled builds. Forked repositories can disable scheduled builds by disabling
    # "scheduled" workflow, while maintaining ability to perform local CI builds.
    workflows:
      - scheduled
    branches:
      - main
    types:
      - requested

jobs:
  Linux:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        branch:
          - master
          - docking
          - features/range_select

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: recursive

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          repository: ocornut/imgui
          ref: ${{ matrix.branch }}

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libglfw3-dev libsdl2-dev

      - name: Build (with SDL2)
        if: github.event_name == 'workflow_run'
        run: |
          make -C imgui_tests/ clean
          echo '#include "imgui_tests_imconfig.h"'                >  imgui_tests/imgui_tests_imconfig_temp.h
          echo '#undef  IMGUI_TEST_ENGINE_ENABLE_IMPLOT'          >> imgui_tests/imgui_tests_imconfig_temp.h
          echo '#define IMGUI_TEST_ENGINE_ENABLE_IMPLOT 0'        >> imgui_tests/imgui_tests_imconfig_temp.h
          make -C imgui_tests/ clean
          make -C imgui_tests/ BACKEND_LIB=sdl2 IMGUI_USER_CONFIG=imgui_tests/imgui_tests_imconfig_tests.h IMGUI_TEST_ENGINE_ENABLE_IMPLOT=0

      - name: Build (with GLFW3)
        if: github.event_name == 'workflow_run'
        run: |
          make -C imgui_tests/ clean
          echo '#include "imgui_tests_imconfig.h"'                >  imgui_tests/imgui_tests_imconfig_temp.h
          echo '#undef  IMGUI_TEST_ENGINE_ENABLE_IMPLOT'          >> imgui_tests/imgui_tests_imconfig_temp.h
          echo '#define IMGUI_TEST_ENGINE_ENABLE_IMPLOT 0'        >> imgui_tests/imgui_tests_imconfig_temp.h
          make -C imgui_tests/ clean
          make -C imgui_tests/ BACKEND_LIB=glfw3 IMGUI_USER_CONFIG=imgui_tests/imgui_tests_imconfig_tests.h IMGUI_TEST_ENGINE_ENABLE_IMPLOT=0

      - name: Build (IMGUI_TEST_ENGINE_ENABLE_IMPLOT=0 + IMGUI_TEST_ENGINE_ENABLE_STD_FUNCTION=0)
        if: github.event_name == 'workflow_run'
        run: |
          mv imgui_tests/thirdparty/implot ./implot-hidden
          echo '#include "imgui_tests_imconfig.h"'                >  imgui_tests/imgui_tests_imconfig_temp.h
          echo '#undef  IMGUI_TEST_ENGINE_ENABLE_IMPLOT'          >> imgui_tests/imgui_tests_imconfig_temp.h
          echo '#define IMGUI_TEST_ENGINE_ENABLE_IMPLOT 0'        >> imgui_tests/imgui_tests_imconfig_temp.h
          echo '#undef  IMGUI_TEST_ENGINE_DISABLE_STD_FUNCTION'   >> imgui_tests/imgui_tests_imconfig_temp.h
          echo '#define IMGUI_TEST_ENGINE_DISABLE_STD_FUNCTION 0' >> imgui_tests/imgui_tests_imconfig_temp.h
          make -C imgui_tests/ clean
          make -C imgui_tests/ IMGUI_USER_CONFIG=imgui_tests/imgui_tests_imconfig_temp.h IMGUI_TEST_ENGINE_ENABLE_IMPLOT=0
          mv ./implot-hidden imgui_tests/thirdparty/implot

      - name: Build imgui_capture_tool
        if: matrix.branch == 'master'
        shell: bash
        run: |
          echo '#define IMGUI_TEST_ENGINE_ENABLE_COROUTINE_STDTHREAD_IMPL 1'  >  capture_tool_single_file.cpp
          echo '#include "../imgui/imgui.cpp"'                                >> capture_tool_single_file.cpp
          echo '#include "../imgui/imgui_demo.cpp"'                           >> capture_tool_single_file.cpp
          echo '#include "../imgui/imgui_draw.cpp"'                           >> capture_tool_single_file.cpp
          echo '#include "../imgui/imgui_tables.cpp"'                         >> capture_tool_single_file.cpp
          echo '#include "../imgui/imgui_widgets.cpp"'                        >> capture_tool_single_file.cpp
          echo '#include "../imgui/examples/example_null/main.cpp"'           >> capture_tool_single_file.cpp
          echo '#include "imgui_test_engine/imgui_capture_tool.cpp"'          >> capture_tool_single_file.cpp
          echo '#include "imgui_test_engine/imgui_te_utils.cpp"'              >> capture_tool_single_file.cpp
          g++ -o capture_tool_single_file -I. -I../imgui capture_tool_single_file.cpp -lm -lstdc++ -lpthread
          rm -f capture_tool_single_file capture_tool_single_file.*

      - name: Build imgui_tests
        run: |
            make -C imgui_tests/ clean
            make -C imgui_tests/ ASAN=1 IMGUI_OPTIMIZE=1

      - name: Run Tests
        # capture_implot_demo alone takes about 60s to run on CI worker therefore it is disabled to save time.
        run: |
          timeout 300 imgui_tests/imgui_tests -nogui -nopause -v2 -ve4 tests,-capture_implot_demo

      - name: Run Viewport Tests
        if: matrix.branch == 'docking'
        run: |
          timeout 300 imgui_tests/imgui_tests -nogui -nopause -v2 -ve4 -viewport-mock viewport

  MacOS:
    runs-on: macos-11
    if: |
      contains(github.event.head_commit.message, 'Build all') ||
      contains(github.event.head_commit.message, 'Build MacOS') ||
      github.event_name == 'workflow_run'

    strategy:
      fail-fast: false
      matrix:
        # MacOS minutes are expensive (x10) for private repo so reduce the amount of tests running there for now.
        branch: [docking]

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: recursive

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          repository: ocornut/imgui
          ref: ${{ matrix.branch }}

      - name: Build
        run: |
          make -C imgui_tests/ ASAN=1

      - name: Run Tests
        run: |
          imgui_tests/imgui_tests -nogui -nopause -v2 -ve4 tests

      - name: Run Viewport Tests
        if: matrix.branch == 'docking'
        run: |
          imgui_tests/imgui_tests -nogui -nopause -v2 -ve4 -viewport-mock viewport

  Windows:
    if: |
      contains(github.event.head_commit.message, 'Build all') ||
      contains(github.event.head_commit.message, 'Build Windows') ||
      github.event_name == 'workflow_run'
    runs-on: windows-2022
    env:
      VS_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\
      MSBUILD_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\

    strategy:
      fail-fast: false
      matrix:
        branch: [docking]
        arch: [Win32, x64]

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: recursive

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          repository: ocornut/imgui
          ref: ${{ matrix.branch }}

      - name: Fix Projects
        shell: powershell
        run: |
          # WARNING: This will need updating if toolset/sdk change in project files!
          gci -recurse -filter "*.vcxproj" | ForEach-Object {
            # Fix SDK and toolset for most samples.
            (Get-Content $_.FullName) -Replace "<PlatformToolset>v110</PlatformToolset>","<PlatformToolset>v142</PlatformToolset>" | Set-Content -Path $_.FullName
            (Get-Content $_.FullName) -Replace "<WindowsTargetPlatformVersion>8.1</WindowsTargetPlatformVersion>","<WindowsTargetPlatformVersion>10.0.20348.0</WindowsTargetPlatformVersion>" | Set-Content -Path $_.FullName
            # Fix SDK and toolset for samples that require newer SDK/toolset. At the moment it is only dx12.
            (Get-Content $_.FullName) -Replace "<PlatformToolset>v140</PlatformToolset>","<PlatformToolset>v142</PlatformToolset>" | Set-Content -Path $_.FullName
            (Get-Content $_.FullName) -Replace "<WindowsTargetPlatformVersion>10.0.14393.0</WindowsTargetPlatformVersion>","<WindowsTargetPlatformVersion>10.0.20348.0</WindowsTargetPlatformVersion>" | Set-Content -Path $_.FullName
          }

      - name: Build ${{ matrix.arch }} imgui_tests
        shell: cmd
        run: '"%MSBUILD_PATH%\MSBuild.exe" imgui_tests/imgui_tests.vcxproj /p:Platform=${{ matrix.arch }} /p:Configuration=Release'

      - name: Run Tests
        run: |
          imgui_tests/Release/imgui_tests.exe -nogui -nopause -v2 -ve4 tests

      - name: Run Viewport Tests
        if: matrix.branch == 'docking'
        run: |
          imgui_tests/Release/imgui_tests.exe -nogui -nopause -v2 -ve4 -viewport-mock viewport
